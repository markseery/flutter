/*

  Example Future Builder
  
  Handy when you want the UI build to wait until some other work is done.
  
  This can happen when an async function needs to execute: networking, file,...
  
  Builder functions cannot be marked as async

 */

import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Future Builder Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(title: 'Future Builder Demo'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);
  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<Image> images = <Image>[];

  Future<dynamic> _doWork() async {
    // Did insert rather than add, because will add everytime it rebuilds
    await images.insert(0,Image.network('https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885_1280.jpg'));
    await images.insert(1,Image.network('https://cdn.pixabay.com/photo/2014/02/27/16/10/tree-276014_1280.jpg'));
    await images.insert(2,Image.network('https://cdn.pixabay.com/photo/2015/12/01/20/28/road-1072823_1280.jpg'));
    return "done";
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar: AppBar(
          title: Text(widget.title),
          backgroundColor: Colors.black,
        ),
        body: FutureBuilder(
            future: _doWork(),
            builder: (BuildContext context, canbeanyname) {

              if (canbeanyname.hasData){
                // Can do initial work here if wanted
                // executes when data is available
                print(canbeanyname.data.toString());
              }
              return Container(
                child: ListView.builder(
                  itemCount: images.length,
                  itemBuilder: (context, index) {
                    return Container(
                      child: images[index],
                    );
                  },
                ),
              );
            }
        )
    ); // This trailing comma makes auto-formatting nicer for build methods.
  }
}
